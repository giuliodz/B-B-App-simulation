#BlueJ class context
comment0.target=Statistics
comment0.text=\n\ This\ class\ parses\ through\ Airbnb\ data\ and\ returns\ \n\ relevant\ statistics\ of\ the\ data\ that\ can\ then\ be\ displayed\ in\ the\ GUI\n\n\ @author\ Giulio\ Di\ Zio\n\ @version\ 17.03.2019\n
comment1.params=
comment1.target=Statistics()
comment1.text=\n\ Constructor\ to\ initialize\ the\ referred\ propertyList\ for\ statistics\ computation.\n
comment10.params=a\ b
comment10.target=int\ compare(int,\ int)
comment10.text=\n\ Simple\ method\ used\ to\ compare\ 2\ integers.\n\ @param\ First\ number\n\ @param\ Second\ number\n\ @return\ 1,\ 0,\ or\ -1\ for\ if\ the\ first\ number\ is\ greater,\ equal\ to,\ or\ less\ then\ the\ second\ one.\n
comment11.params=neighbourhood
comment11.target=int\ getNeighbourhoodAveragePrice(java.lang.String)
comment11.text=\n\ caluculates\ the\ average\ price\ por\ property\ in\ a\ given\ neighbourhood.\n\ @param\ The\ name\ of\ the\ neighbourhood.\n\ @return\ Average\ price.\n
comment12.params=fromPrice\ toPrice\ neighbourhood
comment12.target=int\ getMatchingProperties(int,\ int,\ java.lang.String)
comment12.text=\n\ Calculates\ how\ many\ properties\ there\ are\ that\ match\ the\ user\ filters.\n\ @param\ Minimum\ price\n\ @param\ Maximum\ price\n\ @param\ Name\ of\ the\ neighbourhood\n\ @return\ number\ of\ matching\ properties\ \n
comment13.params=fromPrice\ toPrice\ neighbourhood
comment13.target=int\ getPropertiesNearTubeStations(int,\ int,\ java.lang.String)
comment13.text=\n\ Calculates\ how\ many\ properties\ are\ within\ 500m\ away\ from\ a\ tube\ station\ taking\ into\ account\ some\ filters\ that\ the\ user\ might\ have\ set.\n
comment14.params=lat\ lon
comment14.target=boolean\ isNearbyStations(double,\ double)
comment14.text=\n\ \ Check\ whether\ 500meters\ away\ from\ a\ given\ coordinate\ there\ are\ any\ tube\ stations.\n\ \ @param\ latitude\n\ \ @param\ longitude\n\ \ @return\ true\ if\ 500m\ away\ from\ the\ given\ location\ there's\ at\ least\ one\ tube\ station.\n
comment2.params=fromPrice\ toPrice\ neighbourhood
comment2.target=java.util.ArrayList\ filterProperties(java.lang.Integer,\ java.lang.Integer,\ java.lang.String)
comment2.text=\n\ @return\ ArrayList\ containing\ properties\ within\ a\ certain\ range\ of\ pricce\ and\ in\ a\ specific\ neighbourhood.\n\ @param\ fromPrice.\ The\ minimum\ price\ for\ the\ properties\ to\ look\ for.\n\ @param\ toPrice.\ The\ maximum\ price\ for\ the\ properties\ to\ look\ for.\n\ @param\ neighbourhood.\ The\ name\ of\ the\ neighbourhood\ for\ filtering\ properties.\ \n
comment3.params=fromPrice\ toPrice\ neighbourhood
comment3.target=int\ reviewsForProperty(int,\ int,\ java.lang.String)
comment3.text=\n\ @retunr\ The\ number\ of\ reviews\ por\ property\n\ @param\ fromPrice.\ The\ minimum\ price\ for\ the\ properties\ to\ look\ for.\n\ @param\ toPrice.\ The\ maximum\ price\ for\ the\ properties\ to\ look\ for.\n\ @param\ neighbourhood.\ The\ name\ of\ the\ neighbourhood\ for\ filtering\ properties.\ \n
comment4.params=fromPrice\ toPrice\ neighbourhood
comment4.target=int\ getNumberAvailableProperties(int,\ int,\ java.lang.String)
comment4.text=\n\ @return\ Number\ of\ available\ properties.\n\ @param\ fromPrice.\ The\ minimum\ price\ for\ the\ properties\ to\ look\ for.\n\ @param\ toPrice.\ The\ maximum\ price\ for\ the\ properties\ to\ look\ for.\n\ @param\ neighbourhood.\ The\ name\ of\ the\ neighbourhood\ for\ filtering\ properties.\ \n
comment5.params=fromPrice\ toPrice\ neighbourhood
comment5.target=int\ getNumberEntireHomes(int,\ int,\ java.lang.String)
comment5.text=\n\ @return\ number\ of\ entire\ homes.\n\ @param\ fromPrice.\ The\ minimum\ price\ for\ the\ properties\ to\ look\ for.\n\ @param\ toPrice.\ The\ maximum\ price\ for\ the\ properties\ to\ look\ for.\n\ @param\ neighbourhood.\ The\ name\ of\ the\ neighbourhood\ for\ filtering\ properties.\ \n
comment6.params=
comment6.target=java.util.HashMap\ getNeighbourhoodAndCost()
comment6.text=\n\ @return\ An\ hashMap\ that\ contains\ the\ neighbourhood\ names\ as\ keys\ and\ the\ sum\ of\ their\ property\ prices\ as\ values.\ (the\ sum\ is\ take\ into\ account\ also\ the\ number\ of\ minimum\ nights\ of\ staying).\n
comment7.params=
comment7.target=java.lang.String\ getMostExpensiveNeighbourhood()
comment7.text=\n\ @return\ The\ name\ of\ the\ most\ expensive\ neighbourhood\ taking\ into\ account\ the\ minimunm\ number\ of\ nights\ of\ staying\ too.\n
comment8.params=neighbourhood
comment8.target=int\ getNeighbourhoodRank(java.lang.String)
comment8.text=\n\ @param\ The\ neighbourhood\ to\ query.\n\ @return\ The\ position\ of\ that\ neighbourhood\ in\ the\ "neigbourhood-cost-rank"\n
comment9.params=set\ highest
comment9.target=java.util.ArrayList\ sortNeighbourhoods(java.util.Set,\ int)
comment9.text=\n\ @param\ Set\ of\ key-value\ pairs\ containing\ the\ name\ of\ the\ neighbourhood\ and\ the\ price\ of\ the\ properties\ it\ holds.\n\ @param\ highest\ The\ price\ of\ the\ most\ expensive\ neighbourhood.\n\ @return\ A\ sorted\ arrayList\ of\ neighbourhoods\ according\ to\ their\ expensiveness\ (Most\ to\ least\ expensive).\n
numComments=15
